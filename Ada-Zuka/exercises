Lab 1.
Examples from http://zsv.web.elte.hu/ada_files/starting/

GPS (Gnat Programming Studio) usage: 
Menu Project - new .. - single project forward - 
name and choose a directory where you work 

You need to have at least one main file.
Menu Project - Properties - Main Files - Add at + 
add a file which you want ot run

Menu Build - compile - build - run (or the icons under menu)

In cmd window compiling is gnatmake hello.adb
Run the executable file hello

1. Find the maximum of 2 numbers.

2. Find the maximum of 3 numbers.

3. Add the numbers from 1..N.

4. Check the sign of x. (x>0 -> 1, x=0 -> 0, x<0 -> -1)

5. Compute the combination of N elements taken as K.

6. Compute the approximative value of Pi using the formula:
pi/2 = 2/1 * 2/3 * 4/3 * 4/5 * ...

7. Check if a number is even (n mod 2 = 0)

8. Find the approximative value of the Euler number 

e= 1+ 1/1! + 1/2! + 1/3! + 1/4! + ...

==========================================

Lab 2.
Examples from http://zsv.web.elte.hu/ada_files/units/
Include in the maths package the functions computing ex 9 to 15.

9. Add the digits of a number 123 -> 6

10. Check if a number can be divided by 9 (the sum of digits can be divided by 9).

11. Find the perfect numbers in the 1..10000 interval
(a number is perfect if is equal to the sum of its divisors
eg. 6 is perfect 6 = 1+2+3).

12. Compute the approximative value of sin(x) using the Taylor formula

sin(x) = x/1! - x**3/3! + x**5/5! - x**7/7! + ...

reuse the already computed tag t and multiply accordingly t*x*x/f*(2*i)*(2*i+1) 

13. Check if a number is palindrom (symetric to the center of it)

    12321 -> true, 1234 -> false

14. Compute recursively the nth power of x (both numbers are positive).

15. Compute recursively the factorial n! = 1*2*3*...*n

==========================================

Lab 3.
Examples from http://zsv.web.elte.hu/ada_files/arrays/

16. Compute the sum of the elements of an array in recurse way.

17. Implement the bubble sort algorithm for sorting an array.

18. Compute the sum of the elements of the main diagonal of a square matrix.

19. Find the local maximum elements in a matrix, i.e. the elements that are
max on the row and min on its column.
    In the following M we have 2 local max elements

    11 22 33 44 55
     1  8  3  8  8
    10 10 20 30  1

    M(2,2) = 8 
    M(2,4) = 8

20*. Print the elements of a matrix in spiral way.
    The above M:   11 22 33 44 55 8 1 30 20 10 10 1 8 3 8

==========================================

Lab 4.
Examples from http://zsv.web.elte.hu/ada_files/package/

21. Extend the SetQ package with two more operators: + and *.

22. Write a simplified queue type where extracting an element from the queue
is always done at the first position of the array used as representation.

23. Write a Bag type (you can store multiple elements opposit to the set).
The bag can contain elements in the 1..100 interval.
Define the insert_one, insert_multiple, extract_one, extract_multiple, 
is_empty, print operations.
hint: The index type can be the above interval.

==========================================

Lab 5.
http://zsv.web.elte.hu/ada_files/generic/

24. Write a generic map function.
(the map applies a function to every element of a list)
The mymap demo should compute the half (in Float) of the elements
of an array.

25. Write a Reversal generic procedure for reversing the order of the 
elements of an array. (parameters: indefinit array type and its index and
element type). The demo should reverse an array of integers.
(hint: use the Pred and Succ attributes).

26. Use ex. 25 so that the element type should be limited, and
additionaly a Swap procedure parameter should be used by the generic procedure.
Swap will exchange its parameters. Change the demo accordignly.

27. Write a generic procedure to decide if an element can be found more 
than once in an array.
The generic procedure has the following parameters: an in array,
out logical value - true if an element occurs min. 2 times, 
and 2 out index values - where the multiple element can be found).
Write a demo for checking duble elements of an integer array.

28.  Use ex. 27 so that the element type should be limited, and
additionaly an "=" operator should be included with a default option.
Change the demo accordignly.

==========================================

Lab 6.
http://zsv.web.elte.hu/ada_files/generic/
sort and stack using generics

29. Solve the exercises of the demo programming test (generic_test.pdf).

==========================================

Lab 7. 
Lab test1

==========================================

Lab 8. 
Examples of http://zsv.web.elte.hu/ada_files/exception/
and http://zsv.web.elte.hu/ada_files/pointer/

30. Implement the FIFO data structure using pointers.

31. Sort an array using binary search tree. 
In a binary search tree the elements greater then the root are
going to be placed in a right sub-tree, while the elements smaller
then the root will be placed in the left sub-tree.
The tree should be implemented in a generic package using pointers. 

generic
type Elem is private;
with function "<" (a, b: Elem) return Boolean is <>;

package Tree is
type BSTree is private;
type TArray is array (Positive range <>) of Elem;

function Make_Tree (A: TArray) return BSTree; -- creates a binary search tree from an array
procedure Insert (E: Elem; T: in out BSTree); -- inserts an element in the tree
-- implement the 3 traversing modes:
function PreOrder (T: BSTree) return TArray; -- root-left-right
function InOrder (T: BSTree) return TArray; -- left-root-right
function PostOrder (T: BSTree) return TArray; -- left-right-root.

private
type Node;
type BSTree is access Node;
type Node is record 
     d: Elem;
     LeftT, RightT: BSTree;
end Node;

==========================================

Lab 9. 
Examples of http://zsv.web.elte.hu/ada_files/tasks1/

32. One pair of shoes is walking on the sand, first the left shoe then the right,
and so on. While they are walking they leave a trace in the sand (send a message to it).
Altogether 10 steps will be done, in alternating mode.
Simulate with tasks (sand, left_shoe, right_shoe) the march in the sand.

==========================================

Lab 10.
Examples of http://zsv.web.elte.hu/ada_files/tasks1/

33. There is a chicken and a little child that needs to feed the chicken, since
in the stomach of the chicken the number of seeds are decreasing at every second.
If the nr seeds = 0 then the chicken will die. If the child feeds it, it increases
the seeds with 3 (4 seeds are at the beginning in the stomach).
The child needs to play with the chicken beacuse if it not then will die of sorrow
(in this case an exception GONE will be raised).
If the chicken consumes 30 seeds, then it will grow up and fly away, and
the child will be unhappy. Write all the events of the feeding simulation on the screen.

34. Simulate the traffic light as in the followings.
Create an enumeration type colours with the values: red, yellow, green.
Write a protected, called lamp, which has a Change procedure and an isCoulour function,
and a private variable light of type colours and initial value red.
The procedure should modify the light variable in circular way (after green it should be
red) and print the colour of the light. The function return the value of the light.
A task called scheuler should call the procedure change, then waits 2.0 seconds,
change, wait 1.5 seconds, then change again and wait 0.5 seconds.
All these changes should be repeated three times.

35. In an extension of the lamp the protected should contain an entry point as well,
pass, which in case of the light = green enables the cars to cross the street, 
and writes this on the screen. 
Create the task type car with two discriminants: registration plate (a String pointer)
and time value (duration pointer).
The car task should queue at the light, and wait for green light for 0.2 seconds, 
and cross the street in case of green, and print its registration 
number and the fact that it crossed. If it could not cross, then it repeats the above 
until it coudl cross the street.
Create an array of three car pointers with different licence numbers and duration values,
and simuate the street crossing.

==========================================

Lab 11.

Examples of http://zsv.web.elte.hu/ada_files/tasks2/

36. Given the map of a castel (see hountedhouse.ads and adb) implement the following story. 

A princess, who has inistialy the position 1.3 and 3 lives gets easily scared by ghosts.
When a princess is scared by a ghost (who is giving to her its position by the entry parameter)
it loses one life. The princess should check if the ghost was also on the same position 
as hers in order to loose life. When she has no more lives, she dies. 
A ghost calls the princess until she is callable (use Task'Callable attribute)
then it whill have a random position (GetRandPos) and tries to scary the princess. 
Between two calls of the princess, it is waiting 0.2 seconds.

37. Write a wizard task whom dynamically creates ghost. The task type is with discriminats
(number of ghosts it needs to create, and duration value parameter which will be given 
to the created ghost). The ghost now makes a timed call of the princess (is willing to
wait as long as was given by the discriminats duration value).

38. The princess now is randomly moving inside the castle. Generate for this
random directions, and find a new position to her. Check if the position is correct.
If the princess reaches exit then she escaped, and no more ghosts can scary her.

39. The princess if has only one life left, can ask for help from the king,
whom randomly can give her extra life to survive.

40. Write protected tasks for generating random values and for safety printing of messages.
  
==========================================

Lab 12. 
Lab test2

==========================================





