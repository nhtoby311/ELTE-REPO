Databases II. Midterm test, 2020.10.20. 14.15
Name: LE THANH DUC
Neptun code: YZ49Y8

Solutions should be written into this file and sent to the following email address:
nikovits@inf.elte.hu

Minimal requirement from "paper" exercises: 8 points
Minimal requirement from computer exercises: 8 points
Grade levels will be the following: 
   24 points (2), 33 points (3), 42 points (4), 51 points (5)

"Paper" exercises
========================================================================
1. (6 points)
Insert the following keys (in the given order) into the B+ tree below: 53, 22, 92 
Let's suppose that a node (block) can contain 3 keys and 4 pointers.
Redraw the tree after each split.

                           70
                41|56                 78
   16|31|35   41|44|52   56|68    70|74   78|81|87  
------------------------------------------------------------------------
Solution:
                           70
              41|52|56                 78
   16|31|35   41|44		52|53   56|68    70|74   78|81|87             <-- ins 53


                           52|70
              31|41			56                 78|87
   16|22	31|35   41|44		52|53   56|68    70|74   78|81|87     <-- ins 22


                           52|70
              31|41			56                 78|87
   16|22	31|35   41|44		52|53   56|68    70|74   78|81 87|92  <-- ins 92
========================================================================
2. (6 points)
a) Compress the following bit vector with run-length encoding:
   100000000000000010000000000011

b) Decompress the following run-length encoded bit vector:
   111011101010110110
------------------------------------------------------------------------
Solution:
a) 100000000000000010000000000011
As we could get from bit vector above:
(0 i)1 
(15 i)1 
(11 i)1 
(0 i)1
(0 i)1 
(1111 i)1 
(1011 i)1 
(0 i)1

(0 J) (4 J) (4 J) (0 J)

Result: 111011111110101100

b) 11101110101011011
1110
1110 -> 14
10
10 -> 2
110
110 -> 6
Result: 000000000000001001000000
========================================================================
3. (8 points)
There is a Linear hash table below. We can put two records into a block,
n = 4 (current number of buckets); i = 2 (number of bits used);
r/n = 2.9 (predefined threshold, where r is the actual number of records)

0100                 0111 
----                 ----
1100   0101   1010   1011
0000   1101   0010   0011 
----   ----   ----   ----
 00     01     10     11

Insert the following values into the hash table: 1000, 1110, 0110, 1111
Redraw the diagram when you create a new bucket.
------------------------------------------------------------------------
Solution:

========================================================================
4. (10 points)
Let's consider a relation R with the following parameters:
T(R)=1600000, block size = 8192 bytes, L(R)=256 bytes, V(R,A)=250, and let W the result
of the following query: W <-- SELECT c1,c2 FROM R WHERE A='x';
a) Compute B(W) if L(W)=64 bytes.
b) What is the cost (in block I/O) of a sort operation on R, if the memory size is 101 blocks?
------------------------------------------------------------------------
Solution:
a)
Bf(R) = (blocksize)/L(R) = 8192/256 = 32
Bf(W) = (blocksize)/L(W) = 8192/64  = 128
T(W)  = T(R) / V(R,A) = 1600000/250 = 6400
B(R)  = T(R) / bf(R)  = 1600000/32 = 50000
B(W)  = T(W) / Bf(W)  = 6400/128 = 50

b)
Cost = 2B(R) +2B(R)log[B(R)/M] - B(R) = 100000 + 100000* 1.347 -50000 = 184700
========================================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
========================================================================
Computer exercises in SQL and PL/SQL. 
You should send your queries and programs as well as the output!!!
You can work either in Aramis or Ullman database.
------------------------------------------------------------------------
5. (10 points)
Give the name and size of the BITMAP indexes whose owner is ’NIKOVITS’ (Index_name, Size)
------------------------------------------------------------------------
Solution:
SELECT a.bytes, b.index_name FROM DBA_SEGMENTS a, DBA_INDEXES b WHERE a.owner = b.owner AND a.segment_name = b.index_name
AND b.owner ='NIKOVITS' AND b.index_type ='BITMAP';

Output:
65536	EMP5
131072	CUSTOMERS_MARITAL_BIX
196608	CUSTOMERS_YOB_BIX
========================================================================
6. (10 points)
Write a PL/SQL function which returns in a character string the list of table names 
(comma separated list in alphabetical order) of owner NIKOVITS, whose second last column has data type DATE.

CREATE OR REPLACE FUNCTION nt_tables RETURN VARCHAR2 IS
...
SELECT nt_tables() FROM dual;

You can check your program with the following:
set serveroutput on
EXECUTE check_plsql('nt_tables()');
------------------------------------------------------------------------
Solution:
SET SERVEROUTPUT ON;
CREATE or REPLACE FUNCTION nt_tables RETURN VARCHAR2 IS
    r  VARCHAR(100);
    ct integer := 0;
    CURSOR curs IS (SELECT * FROM (SELECT d.table_name FROM dba_tab_columns d WHERE d.owner = 'NIKOVITS' AND d.data_type = 'DATE' AND d.COLUMN_ID = 
                    ((SELECT COUNT(*) FROM dba_tab_columns WHERE owner = 'NIKOVITS' AND TABLE_NAME = d.table_name)-1) ORDER BY table_name));
BEGIN
for e in curs loop
if ct = 0 then
r := concat(r, e.table_name);
ct := ct + 1;
else
r := concat(r, ', ');
r := concat(r, e.table_name);
end if;
end loop;
return r;
END;
/
SELECT nt_tables() FROM dual;
EXECUTE check_plsql('nt_tables()')

RESULT: 

Function NT_TABLES compiled

>>Query Run In:Query Result 7
YZ49Y8.NT_TABLES ---> output of the program is GOOD.


PL/SQL procedure successfully completed.
========================================================================
7. (10 points)
Write a PL/SQL procedure which prints out the data blocks of table NIKOVITS.CUSTOMERS
in which the number of records is greater than 40. The output has 3 columns: File_id, Block_number
and the number of records within that block. Columns are separeted by spaces.

CREATE OR REPLACE PROCEDURE gt_40 IS
...
set serveroutput on
EXECUTE gt_40();

You can check your program with the following:
EXECUTE check_plsql('gt_40()');
------------------------------------------------------------------------
Solution:
... copy here the PL/SQL program and the output ...
========================================================================

